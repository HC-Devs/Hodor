{"version":3,"file":"sqlite.js","sourceRoot":"","sources":["sqlite.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;AAE5C,MAAM,YAAY,GAAG,kBAAkB,CAAC;AAExC;IAII,YAAY,GAAQ;QAEhB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEK,OAAO;;YACT,wEAAwE;YACxE,IAAI,CAAC,EAAE,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAE5C,OAAO,IAAI,CAAC,EAAE,CAAC;QACnB,CAAC;KAAA;IAEK,IAAI;;YACN,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAErB,IAAI,KAAK,CAAC;YAEV,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC/B,KAAK,GAAG,sDAAsD,CAAC;YAC/D,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEzB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,GAAG,CAAC,KAAK,EAAE,MAAM;;YACnB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAErB,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC3C,OAAO,CAAC,OAAO,GAAG,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACrD,CAAC;KAAA;IAEK,GAAG,CAAC,KAAK,EAAE,MAAM;;YACnB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAErB,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC3C,OAAO,GAAG,CAAC;QACf,CAAC;KAAA;IAEK,GAAG,CAAC,KAAK,EAAE,MAAM;;YACnB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YAErB,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC3C,OAAO,GAAG,CAAC;QACf,CAAC;KAAA;CACJ;AAlDD,wBAkDC;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","sourcesContent":["const PromiseB = require(\"bluebird\");\nconst sqlite = require(\"sqlite3\").verbose();\n\nconst databaseFile = \"./sql/hc.sqlite3\";\n\nexport class SQLITE {\n    public db: any;\n    public bot: any;\n\n    constructor(bot: any) {\n\n        this.bot = bot;\n\n        this.init();\n    }\n\n    async connect() {\n        //let dbPromise = sqlite.open(databaseFile, { cached: true, PromiseB });\n        this.db = new sqlite.Database(databaseFile);\n\n        return this.db;\n    }\n\n    async init() {\n        await this.connect();\n\n        let query;\n\n        console.log(\"sql : init runs\");\n        query = \"CREATE TABLE IF NOT EXISTS test (test TEXT NOT NULL)\";\n        await this.db.run(query);\n\n        return true;\n    }\n\n    async get(query, params) {\n        await this.connect();\n\n        let res = await this.db.get(query, params);\n        return (typeof res === \"undefined\" ? null : res);\n    }\n\n    async all(query, params) {\n        await this.connect();\n\n        let res = await this.db.all(query, params);\n        return res;\n    }\n\n    async run(query, params) {\n        await this.connect();\n\n        let res = await this.db.run(query, params);\n        return res;\n    }\n}\n\nmodule.exports = SQLITE;\n"]}