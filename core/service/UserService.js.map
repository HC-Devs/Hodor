{"version":3,"file":"UserService.js","sourceRoot":"","sources":["UserService.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wCAAmC;AAEnC,4CAAuC;AAIvC,MAAM,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAExC,kBAA+B,YAAoB;;QAC/C,IAAI,OAAO,GAAG,IAAI,iBAAO,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAC,KAAK,CAAC,GAAG,CAAC,UAAS,CAAC,IAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA;QACrE,IAAI,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5C,IAAI,OAAO,GAAG,IAAI,WAAI,CAAC,KAAK,EAAC,UAAU,EAAC,aAAa,CAAC,CAAC;QAEvD,MAAM,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAE9B,IAAI,aAAa,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEjD,aAAa,CAAC,IAAI,GAAG,WAAW,CAAC;QACjC,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEjD,IAAI,SAAS,GAAG,MAAM,QAAQ,CAAC,YAAY,CAAC,CAAC;QAE7C,MAAM,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAEpC,OAAO,SAAS,CAAC;IACrB,CAAC;CAAA;AAnBD,4BAmBC;AAED,kBAA+B,YAAoB;;QAC/C,IAAI,OAAO,GAAG,IAAI,iBAAO,CAAC,YAAY,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;QACnC,OAAO,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;CAAA;AAJD,4BAIC;AAED,+BAA+B,IAAI;IAC/B,MAAM,MAAM,GAAG,eAAe,CAAC;IAC/B,MAAM,MAAM,GAAG,OAAO,CAAC;IAEvB,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,KAAK;QAC3B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACvB,OAAO,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;AACjC,CAAC","sourcesContent":["import {User} from '../model/User';\n\nimport {UserDao} from '../dao/UserDao';\n\nimport {SQLITE} from '../../classes/sqlite';\n\nconst Table = require('markdown-table');\n\nexport async function TestUser(sqlConnector: SQLITE) : Promise<string> {\n    let userdao = new UserDao(sqlConnector);\n    let users = await userdao.getAll();\n    let maxId = Math.max.apply(Math,users.map(function(o){return o.id;}))\n    let newId = (parseInt(maxId) +1).toString();\n    let newUser = new User(newId,\"aurelien\",\"Hades corpo\");\n\n    await userdao.insert(newUser);\n\n    let newUserFromDb = await userdao.getById(newId);\n\n    newUserFromDb.name = \"aur√©lienK\";\n    let result = await userdao.update(newUserFromDb);\n\n    let tabResult = await ListUser(sqlConnector);\n\n    await userdao.delete(newUserFromDb);\n\n    return tabResult;\n}\n\nexport async function ListUser(sqlConnector: SQLITE): Promise<string> {\n    let userdao = new UserDao(sqlConnector);\n    let users = await userdao.getAll();\n    return generateMarkdownTable(users);\n}\n\nfunction generateMarkdownTable(data) {\n    const header = '```Markdown\\n';\n    const footer = '\\n```';\n\n    let array = [];\n    data.forEach(function (d, index) {\n        array.push(d.getArray());\n    });\n    var tab = Table(array);\n    return header + tab + footer;\n}"]}