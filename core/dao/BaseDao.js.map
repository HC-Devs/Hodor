{"version":3,"file":"BaseDao.js","sourceRoot":"","sources":["BaseDao.ts"],"names":[],"mappings":"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","sourcesContent":["import { SQLITE } from '../../classes/sqlite';\nimport {BaseModel} from '../model/BaseModel';\n\n\n/*\n*  Generic abstract class \n*  Give base methods to manipulate data from database\n*  All dao must override this class\n*/\nexport abstract class BaseDao<T extends BaseModel> {\n\n    constructor(protected dbTable: string, protected idFieldName, protected sqlConnector: SQLITE) { }\n\n    /*\n    *  Get strongly typed date model object from database row\n    */\n    protected abstract getModelFromRow(row: any): T;\n\n    /*\n    *  Get map of field-value from model\n    */\n   protected abstract getMapDataFromModel(model: T): Map<string,any>;\n\n    /*\n    *  Get unique element from DB with unique identifier\n    */\n    public async getById(id: string): Promise<T> {\n        let query = `SELECT * FROM ${this.dbTable} where ${this.idFieldName} = ?`;\n        let row = await this.get(query, [id]);\n        let m = this.getModelFromRow(row);\n\n        return m;\n    }\n\n    /*\n    *  Get all elements from DB \n    */\n    public async getAll(): Promise<Array<T>> {\n        let query = `SELECT * FROM ${this.dbTable}`;\n        let models: Array<T> = [];\n        let rows = await this.all(query);\n        let r = rows as any[];\n        // for(var row in r){\n        //     let data = this.getModelFromRow(r[row]);\n        //     models.push(data);\n        // }\n        r.forEach(function (row, index) {\n            console.log(row.name);\n            let data = this.getModelFromRow(row);\n            models.push(data);\n        }.bind(this));\n\n        return models;\n    }\n\n      /*\n    *  Create an element into DB \n    *  Return id of created element\n    */\n   public async insert(model: T): Promise<string>{\n    let mapDataField = this.getMapDataFromModel(model);\n    let fieldsDef = Array.from( mapDataField.keys()).join(',');\n\n    let values = Array(mapDataField.size).fill('?');\n    let valuesParam= Array.from( mapDataField.values());\n\n    let query = `INSERT INTO ${this.dbTable} (${fieldsDef})  VALUES (${values})`;\n    let result = await this.run(query, valuesParam);\n    console.log(`Row(s) updated: ${result.changes}`);\n    return result.lastID;\n}  \n\n    /*\n    *  Update an element from DB \n    *  Return true if one element is really updated \n    */\n   public async update(model: T): Promise<boolean>{\n        let mapDataField = this.getMapDataFromModel(model);\n        let setStatement : string[] = [];\n        let params : any[] = [];\n\n        mapDataField.forEach((value,key) =>{\n            setStatement.push(`${key} = ?`);\n            params.push(value);\n        } );\n        let setDefinition = setStatement.join(',');\n        params.push(model.id);\n\n        let query = `UPDATE ${this.dbTable} SET ${setDefinition} WHERE ${this.idFieldName} = ?`;\n        let result = await this.run(query, params);\n        console.log(`Row(s) updated: ${result.changes}`);\n        return result.changes === 1;\n    }  \n\n    /*\n    *  Delete an element from DB \n    *  Return true if one element is really deleted\n    */\n    public async delete(model: T): Promise<boolean>{\n       return await this.deleteFromId(model.id);\n    }\n\n    /*\n    *  Delete an element from DB \n    *  Return true if one element is really deleted\n    */\n   public async deleteFromId(id: string): Promise<boolean>{\n        let query = `DELETE FROM ${this.dbTable} WHERE ${this.idFieldName} = ?`;\n        let result = await this.run(query, [id]);\n        console.log(`Row(s) deleted: ${result.changes}`);\n        return result.changes === 1;\n    }\n\n    /*\n    *  Wrapper arround sqlite [all] to fetch all result from query \n    */\n    private async all(query, params = []) {\n        return new Promise(function (resolve, reject) {\n            if (params == undefined) {\n                params = [];\n            }\n            console.log(`All query: ${query} \\n with params: ${params.join(',')}`);\n            this.sqlConnector.db.all(query, params, function (err, rows) {\n                if (err) {\n                    reject(\"Read error: \" + err.message);\n                }\n                else {\n                    resolve(rows);\n                }\n            });\n        }.bind(this));\n    }\n\n    /*\n    * Wrapper arround sqlite [run] to run query \n    * If execution was successful, the this object will contain two properties named\n    *  - lastID : which contain the value of the last inserted row ID\n    *  - changes : the number of rows affected by this query \n    * Note that :\n    *   - lastID only contains valid information when the query was a successfully completed INSERT statement. \n    *   - changes only contains valid information when the query was a successfully completed UPDATE or DELETE statement. \n    */\n   private async run(query, params = []): Promise<any> {\n    return new Promise(function (resolve, reject) {\n        if (params == undefined) {\n            params = [];\n        }\n        console.log(`Run query: ${query} \\n with params: ${params.join(',')}`);\n        this.sqlConnector.db.run(query, params, function (err) {\n            if (err) {\n                reject(\"Run error: \" + err.message);\n            }\n            else {\n                resolve(this);\n            }\n        });\n    }.bind(this));\n}\n\n    /*\n    *  Wrapper arround sqlite [get] to get one result from query \n    */\n    private async get(query, params):Promise<any> {\n        return new Promise(function(resolve, reject) {\n            console.log(`Get query: ${query} \\n with params: ${params.join(',')}`);\n            this.sqlConnector.db.get(query, params, function(err, row)  {\n                if(err) reject(\"Read error: \" + err.message)\n                else {\n                    resolve(row)\n                }\n            })\n        }.bind(this));\n    }\n\n} "]}